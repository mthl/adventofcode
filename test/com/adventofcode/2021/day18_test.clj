(ns com.adventofcode.2021.day18-test
  (:require
   [clojure.string :as str]
   [clojure.test :refer [deftest is are]]
   [com.adventofcode.util :as util]
   [com.adventofcode.2021.day18 :as sut]))

(def input
  (util/resources-lines "com/adventofcode/2021/day18.txt"))

(def sample
  (str/split-lines
   "[1,2]
[[1,2],3]
[9,[8,7]]
[[1,9],[8,5]]
[[[[1,2],[3,4]],[[5,6],[7,8]]],9]
[[[9,[3,8]],[[0,9],6]],[[[3,7],[4,9]],3]]
[[[[1,3],[5,3]],[[1,3],[8,7]]],[[[4,9],[6,9]],[[8,2],[7,3]]]]"))

(def parsed
  [[1 2]
   [[1 2] 3]
   [9 [8 7]]
   [[1 9] [8 5]]
   [[[[1 2] [3 4]] [[5 6] [7 8]]] 9]
   [[[9 [3 8]] [[0 9] 6]] [[[3 7] [4 9]] 3]]
   [[[[1 3] [5 3]] [[1 3] [8 7]]] [[[4 9] [6 9]] [[8 2] [7 3]]]]])

(deftest snailfish-math-test
  (is (= parsed (sut/parse-pairs sample)))
  (is (sut/explode? [[[[[9,8],1],2],3],4]))
  (are [pair] (sut/explode? pair)
    [[[[[9,8],1],2],3],4]
    [7,[6,[5,[4,[3,2]]]]]
    [[6,[5,[4,[3,2]]]],1]
    [[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]
    [[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]])

  (are [in out] (= out (sut/explode in))
    [[[[[9,8],1],2],3],4]
    [[[[0,9],2],3],4]

    [7,[6,[5,[4,[3,2]]]]]
    [7,[6,[5,[7,0]]]]

    [[6,[5,[4,[3,2]]]],1]
    [[6,[5,[7,0]]],3]

    [[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]
    [[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]

    [[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]
    [[3,[2,[8,0]]],[9,[5,[7,0]]]]

    [[[[0,7],4],[7,[[8,4],9]]],[1,1]]
    [[[[0,7],4],[15,[0,13]]],[1,1]])

  (is [5 6] (sut/split 11))
  (is [6 6] (sut/split 12))

  (is (= [[[[5,0],[7,4]],[5,5]],[6,6]]
         (sut/sum [[1,1]
                   [2,2]
                   [3,3]
                   [4,4]
                   [5,5]
                   [6,6]])))

  (is (= [[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]
         (sut/sum
          [[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
           [7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
           [[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
           [[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
           [7,[5,[[3,8],[1,4]]]]
           [[2,[2,2]],[8,[8,1]]]
           [2,9]
           [1,[[[9,3],9],[[9,0],[0,7]]]]
           [[[5,[7,4]],7],1]
           [[[[4,2],2],6],[8,7]]])))

  (is (= 3993
         (sut/largest-magnitude
          [[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
           [[[5,[2,8]],4],[5,[[9,9],0]]]
           [6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
           [[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
           [[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
           [[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
           [[[[5,4],[7,7]],8],[[8,3],8]]
           [[9,3],[[9,9],[6,[4,9]]]]
           [[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
           [[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]])))

  (is (= 4140
         (sut/magnitude [[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]])))

  (let [pairs (sut/parse-pairs input)]
    (is (= 4173 (-> pairs sut/sum sut/magnitude)))
    (is (= 4706 (sut/largest-magnitude pairs)))))
